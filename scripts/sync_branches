#!/bin/zsh

# This script is designed to automate the synchronization of multiple Git branches. It defines a set
# of parent branches and their corresponding child branches, then iterates through each parent-child
# relationship to ensure that changes in the parent branches are propagated to their child branches.
# This helps maintain consistency across the branches by rebasing and force-pushing updates.

set -euo pipefail

typeset -A BRANCHES

BRANCHES=(
  [master]="unix windows"
  [unix]="linux darwin"
)


sync_branch() {
  local parent_branch=$1
  local child_branch=$2

  git switch $child_branch
  git pull -q origin $child_branch
  git rebase -q $parent_branch
  git push -q origin $child_branch --force-with-lease
}

for parent_branch in ${(k)BRANCHES}; do
  if [[ $parent_branch == "master" ]]; then
    git switch $parent_branch
    git pull origin $parent_branch
  fi

  for child_branch in ${(z)BRANCHES[$parent_branch]}; do
    [[ $child_branch == ${$(uname -s):l} ]] && PLATFORM=$child_branch
    sync_branch $parent_branch $child_branch > /dev/null
  done
done

if [[ ${PLATFORM:-} != $(git branch --show-current) ]]; then
  git switch $PLATFORM
else
  echo "Skipping checkout, already on $PLATFORM"
fi
